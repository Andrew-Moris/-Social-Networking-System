import { Plugin } from 'postcss'
import { Stats } from 'browserslist'

declare function autoprefixer<T extends string[]>(
  ...args: [...T, autoprefixer.Options]
): Plugin & autoprefixer.ExportedAPI

declare function autoprefixer(
  browsers: string[],
  options?: autoprefixer.Options
): Plugin & autoprefixer.ExportedAPI

declare function autoprefixer(
  options?: autoprefixer.Options
): Plugin & autoprefixer.ExportedAPI

declare namespace autoprefixer {
  type GridValue = 'autoplace' | 'no-autoplace'

  interface Options {
    env?: string

    cascade?: boolean

    add?: boolean

    remove?: boolean

    supports?: boolean

    flexbox?: boolean | 'no-2009'

    grid?: boolean | GridValue

    stats?: Stats

  
    overrideBrowserslist?: string | string[]

    ignoreUnknownVersions?: boolean
  }

  interface ExportedAPI {
    data: {
      browsers: { [browser: string]: object | undefined }
      prefixes: { [prefixName: string]: object | undefined }
    }

    defaults: string[]

    info(options?: { from?: string }): string

    options: Options

    browsers: string | string[]
  }

  let data: ExportedAPI['data']

  let defaults: ExportedAPI['defaults']

  let info: ExportedAPI['info']

  let postcss: true
}

declare global {
  namespace NodeJS {
    interface ProcessEnv {
      AUTOPREFIXER_GRID?: autoprefixer.GridValue
    }
  }
}

export = autoprefixer
