import Container, {
  ContainerProps,
  ContainerWithChildren
} from './container.js'

declare namespace AtRule {
  export interface AtRuleRaws extends Record<string, unknown> {
    
    after?: string

    
    afterName?: string

    
    before?: string

    
    between?: string

    params?: {
      raw: string
      value: string
    }

    semicolon?: boolean
  }

  export interface AtRuleProps extends ContainerProps {
    name: string
    params?: number | string
    raws?: AtRuleRaws
  }

  export { AtRule_ as default }
}

/**
 * const root = postcss.parse('@charset "UTF-8"; @media 
 */
declare class AtRule_ extends Container {
  /**
   * const root = postcss.parse('@layer 
 
   * const root = postcss.parse('@layer 
  
   */
  nodes: Container['nodes'] | undefined
  parent: ContainerWithChildren | undefined

  raws: AtRule.AtRuleRaws
  type: 'atrule'
  /**
   * The at-rule’s name immediately follows the `@`.
   *
   * ```js
   * const root  = postcss.parse('@media print {}')
   * const media = root.first
   * media.name //=> 'media'
   * ```
   */
  get name(): string
  set name(value: string)

  /**
   * The at-rule’s parameters, the values that follow the at-rule’s name
   * but precede any `{}` block.
   *
   * ```js
   * const root  = postcss.parse('@media print, screen {}')
   * const media = root.first
   * media.params //=> 'print, screen'
   * ```
   */
  get params(): string

  set params(value: string)

  constructor(defaults?: AtRule.AtRuleProps)
  assign(overrides: AtRule.AtRuleProps | object): this
  clone(overrides?: Partial<AtRule.AtRuleProps>): this
  cloneAfter(overrides?: Partial<AtRule.AtRuleProps>): this
  cloneBefore(overrides?: Partial<AtRule.AtRuleProps>): this
}

declare class AtRule extends AtRule_ {}

export = AtRule
