import AtRule = require('./at-rule.js')

import { AtRuleProps } from './at-rule.js'
import Comment, { CommentProps } from './comment.js'
import Container, { NewChild } from './container.js'
import CssSyntaxError from './css-syntax-error.js'
import Declaration, { DeclarationProps } from './declaration.js'
import Document from './document.js'
import Input from './input.js'
import { Stringifier, Syntax } from './postcss.js'
import Result from './result.js'
import Root from './root.js'
import Rule, { RuleProps } from './rule.js'
import Warning, { WarningOptions } from './warning.js'

declare namespace Node {
  export type ChildNode = AtRule.default | Comment | Declaration | Rule

  export type AnyNode =
    | AtRule.default
    | Comment
    | Declaration
    | Document
    | Root
    | Rule

  export type ChildProps =
    | AtRuleProps
    | CommentProps
    | DeclarationProps
    | RuleProps

  export interface Position {
    column: number

    line: number

   
    offset: number
  }

  export interface Range {
  
    end: Position

   
    start: Position
  }

  /**
{@link Node.source} 
   */
  export interface Source {
  
    end?: Position

   
    input: Input

    start?: Position
  }

  
  export interface NodeProps {
    source?: Source
  }

  export interface NodeErrorOptions {
    
    endIndex?: number
 
    index?: number
    
    plugin?: string
  
    word?: string
  }

  class Node extends Node_ {}
  export { Node as default }
}

declare abstract class Node_ {

  parent: Container | Document | undefined

  raws: any

  source?: Node.Source

  type: string

  constructor(defaults?: object)

  /**
``
   *
   * @param newNode
   * @return
   */
  after(
    newNode: Node | Node.ChildProps | readonly Node[] | string | undefined
  ): this

  /**
 
   * @param overrides 
   *
   * @return 
   */
  assign(overrides: object): this

  /**
   * @param newNode 
   * @return 
   */
  before(
    newNode: Node | Node.ChildProps | readonly Node[] | string | undefined
  ): this

  /**
   * @param keepBetween 
   */
  cleanRaws(keepBetween?: boolean): void

  /**
   * @param overrides 
   *
   * @return 
   */
  clone(overrides?: object): this

  /**
   * @param overrides 
   * @return 
   */
  cloneAfter(overrides?: object): this

  /**
   * @param overrides 
   *
   * @return 
   */
  cloneBefore(overrides?: object): this

  /**
   * @param message 
   * @param options 
   
   * @return 
   */
  error(message: string, options?: Node.NodeErrorOptions): CssSyntaxError

  /**
   * @return 
   */
  next(): Node.ChildNode | undefined

  /**
   * @param opts 
   * @return 
   */
  positionBy(opts?: Pick<WarningOptions, 'index' | 'word'>): Node.Position

  /**
   * @param index 
   * @return 
   */
  positionInside(index: number): Node.Position

  /**
   * @return 
   */
  prev(): Node.ChildNode | undefined

  /**
   * @param opts 
   * @return 
   */
  rangeBy(
    opts?: Pick<WarningOptions, 'endIndex' | 'index' | 'word'>
  ): Node.Range

  /**
   * @param prop       
   * @param defaultType 
   *             
   * @return {string} 
   */
  raw(prop: string, defaultType?: string): string

  /**
   * @return 
   */
  remove(): this

  /**

   * @param nodes 
   * @return 
   */
  replaceWith(...nodes: NewChild[]): this

  /**
   * @return 
   */
  root(): Root

  /**
  
   * @return 
   */
  toJSON(): object

  /**
   * @param stringifier
   * @return
   */
  toString(stringifier?: Stringifier | Syntax): string

  /**
{@link Result#warn}

   * @param result 
   * @param message
   * @param options
   *
   * @return 
   */
  warn(result: Result, message: string, options?: WarningOptions): Warning

  /**
   {@link Root} 
   */
  protected markDirty(): void
}

declare class Node extends Node_ {}

export = Node
