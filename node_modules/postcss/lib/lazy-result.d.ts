import Document from './document.js'
import { SourceMap } from './postcss.js'
import Processor from './processor.js'
import Result, { Message, ResultOptions } from './result.js'
import Root from './root.js'
import Warning from './warning.js'

declare namespace LazyResult {
  export { LazyResult_ as default }
}

/**
 */
declare class LazyResult_<RootNode = Document | Root>
  implements PromiseLike<Result<RootNode>>
{

  catch: Promise<Result<RootNode>>['catch']


  finally: Promise<Result<RootNode>>['finally']

 
  then: Promise<Result<RootNode>>['then']

  get content(): string

  
  get css(): string


  get map(): SourceMap

  get messages(): Message[]

  get opts(): ResultOptions

  
  get processor(): Processor


  get root(): RootNode

  
  get [Symbol.toStringTag](): string

  /**
   * @param processor 
   * @param css   
   * @param opts    
   */
  constructor(processor: Processor, css: string, opts: ResultOptions)

  /**
   * @return 
   */
  async(): Promise<Result<RootNode>>

  /**
   * @return 
   */
  sync(): Result<RootNode>

  /**
   * @return
   */
  toString(): string

  /**
   * @return 
   */
  warnings(): Warning[]
}

declare class LazyResult<
  RootNode = Document | Root
> extends LazyResult_<RootNode> {}

export = LazyResult
