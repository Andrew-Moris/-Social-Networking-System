import Document from './document.js'
import LazyResult from './lazy-result.js'
import NoWorkResult from './no-work-result.js'
import {
  AcceptedPlugin,
  Plugin,
  ProcessOptions,
  TransformCallback,
  Transformer
} from './postcss.js'
import Result from './result.js'
import Root from './root.js'

declare namespace Processor {
  export { Processor_ as default }
}


declare class Processor_ {

  plugins: (Plugin | TransformCallback | Transformer)[]

  version: string

  /**
   * @param plugins 
   */
  constructor(plugins?: readonly AcceptedPlugin[])

  /**
   * @param css 
 
   * @param opts
   * @return 
   */
  process(
    css: { toString(): string } | LazyResult | Result | Root | string
  ): LazyResult | NoWorkResult
  process<RootNode extends Document | Root = Root>(
    css: { toString(): string } | LazyResult | Result | Root | string,
    options: ProcessOptions<RootNode>
  ): LazyResult<RootNode>

  /**
    {@link Root}
   * @param plugin 
   * @return
   */
  use(plugin: AcceptedPlugin): this
}

declare class Processor extends Processor_ {}

export = Processor
