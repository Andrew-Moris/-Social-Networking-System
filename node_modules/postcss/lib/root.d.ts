import Container, { ContainerProps } from './container.js'
import Document from './document.js'
import { ProcessOptions } from './postcss.js'
import Result from './result.js'

declare namespace Root {
  export interface RootRaws extends Record<string, any> {
   
    after?: string


    codeAfter?: string

    codeBefore?: string

   
    semicolon?: boolean
  }

  export interface RootProps extends ContainerProps {

    raws?: RootRaws
  }

  export { Root_ as default }
}


declare class Root_ extends Container {
  nodes: NonNullable<Container['nodes']>
  parent: Document | undefined
  raws: Root.RootRaws
  type: 'root'

  constructor(defaults?: Root.RootProps)

  assign(overrides: object | Root.RootProps): this
  clone(overrides?: Partial<Root.RootProps>): this
  cloneAfter(overrides?: Partial<Root.RootProps>): this
  cloneBefore(overrides?: Partial<Root.RootProps>): this

  /**
   * @param options 
   * @return
   */
  toResult(options?: ProcessOptions): Result
}

declare class Root extends Root_ {}

export = Root
