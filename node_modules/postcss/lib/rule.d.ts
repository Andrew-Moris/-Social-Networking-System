import Container, {
  ContainerProps,
  ContainerWithChildren
} from './container.js'

declare namespace Rule {
  export interface RuleRaws extends Record<string, unknown> {

    after?: string

    
    before?: string

  
    between?: string

   
    ownSemicolon?: string

    
    selector?: {
      raw: string
      value: string
    }

   
    semicolon?: boolean
  }

  export type RuleProps = {
    raws?: RuleRaws
  } & (
      | {
          selector: string
          selectors?: never
        }
      | {
          selector?: never
          selectors: readonly string[]
        }
    ) & ContainerProps

  export { Rule_ as default }
}

/**
 */
declare class Rule_ extends Container {
  nodes: NonNullable<Container['nodes']>
  parent: ContainerWithChildren | undefined
  raws: Rule.RuleRaws
  type: 'rule'
  /**
   */
  get selector(): string

  set selector(value: string)
  /**
  
   */
  get selectors(): string[]

  set selectors(values: string[])

  constructor(defaults?: Rule.RuleProps)
  assign(overrides: object | Rule.RuleProps): this
  clone(overrides?: Partial<Rule.RuleProps>): this
  cloneAfter(overrides?: Partial<Rule.RuleProps>): this
  cloneBefore(overrides?: Partial<Rule.RuleProps>): this
}

declare class Rule extends Rule_ {}

export = Rule
