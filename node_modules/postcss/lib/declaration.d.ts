import { ContainerWithChildren } from './container.js'
import Node from './node.js'

declare namespace Declaration {
  export interface DeclarationRaws extends Record<string, unknown> {
    
    before?: string

   
    between?: string

    important?: string

    value?: {
      raw: string
      value: string
    }
  }

  export interface DeclarationProps {
    important?: boolean
    prop: string
    raws?: DeclarationRaws
    value: string
  }

  export { Declaration_ as default }
}

/**
 */
declare class Declaration_ extends Node {
  parent: ContainerWithChildren | undefined
  raws: Declaration.DeclarationRaws

  type: 'decl'

  /**
   */
  get important(): boolean
  set important(value: boolean)

  
  get prop(): string

  set prop(value: string)

  get value(): string
  set value(value: string)

  get variable(): boolean
  constructor(defaults?: Declaration.DeclarationProps)

  assign(overrides: Declaration.DeclarationProps | object): this
  clone(overrides?: Partial<Declaration.DeclarationProps>): this
  cloneAfter(overrides?: Partial<Declaration.DeclarationProps>): this
  cloneBefore(overrides?: Partial<Declaration.DeclarationProps>): this
}

declare class Declaration extends Declaration_ {}

export = Declaration
