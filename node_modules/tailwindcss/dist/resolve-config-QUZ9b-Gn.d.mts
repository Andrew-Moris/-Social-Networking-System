import _default from './colors.mjs';

type ArbitraryUtilityValue = {
    kind: 'arbitrary';

    dataType: string | null;
    
    value: string;
};
type NamedUtilityValue = {
    kind: 'named';
 
    value: string;

    fraction: string | null;
};
type ArbitraryModifier = {
    kind: 'arbitrary';
   
    value: string;
};
type NamedModifier = {
    kind: 'named';
 
    value: string;
};
type ArbitraryVariantValue = {
    kind: 'arbitrary';
    value: string;
};
type NamedVariantValue = {
    kind: 'named';
    value: string;
};
type Variant = 

{
    kind: 'arbitrary';
    selector: string;
    relative: boolean;
}

 | {
    kind: 'static';
    root: string;
}

 | {
    kind: 'functional';
    root: string;
    value: ArbitraryVariantValue | NamedVariantValue | null;
    modifier: ArbitraryModifier | NamedModifier | null;
}

 | {
    kind: 'compound';
    root: string;
    modifier: ArbitraryModifier | NamedModifier | null;
    variant: Variant;
};
type Candidate = 

{
    kind: 'arbitrary';
    property: string;
    value: string;
    modifier: ArbitraryModifier | NamedModifier | null;
    variants: Variant[];
    important: boolean;
    raw: string;
}

 | {
    kind: 'static';
    root: string;
    variants: Variant[];
    important: boolean;
    raw: string;
}

 | {
    kind: 'functional';
    root: string;
    value: ArbitraryUtilityValue | NamedUtilityValue | null;
    modifier: ArbitraryModifier | NamedModifier | null;
    variants: Variant[];
    important: boolean;
    raw: string;
};

type PluginUtils = {
    theme: (keypath: string, defaultValue?: any) => any;
    colors: typeof _default;
};

export type { Candidate as C, NamedUtilityValue as N, PluginUtils as P, Variant as V };
